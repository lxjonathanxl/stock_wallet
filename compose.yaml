version: '3.8'
services:
  kafka:
    image: 'bitnami/kafka:latest'
    ports:
      - '9094:9094'
    networks:
      spring-mockstock-network:
    environment:
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,EXTERNAL://localhost:9094
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER

  mongo_db:
    image: mongo:5.0.2
    restart: unless-stopped
    env_file: ./.env
    environment:
      - MONGO_INITDB_ROOT_USERNAME=$MONGODB_USER
      - MONGO_INITDB_ROOT_PASSWORD=$MONGODB_PASSWORD
    networks:
      spring-mockstock-network:
    ports:
      - $MONGODB_LOCAL_PORT:$MONGODB_DOCKER_PORT
    volumes:
      - db:/datamongo/db

  mysqldb:
    container_name: mysqldb
    image: mysql
    env_file: ./.env
    environment:
      - MYSQL_ROOT_PASSWORD=$MYSQLDB_PASSWORD
      - MYSQL_DATABASE=$MYSQLDB_DATABASE
    networks:
      spring-mockstock-network:
    ports:
      - $MYSQLDB_LOCAL_PORT:$MYSQLDB_DOCKER_PORT
    volumes:
      - db:/datasql/db

  spring-wallet-api:
    container_name: spring-wallet-api
    build:
      context: ./wallet
      dockerfile: Dockerfile
    env_file: ./.env
    volumes:
      - $LOG_PATH/log:/log
    ports:
      - $WALLET_LOCAL_PORT:$WALLET_DOCKER_PORT
    depends_on:
      - mysqldb
      - mock-stock-data-server
    networks:
      spring-mockstock-network:
    environment:
      API_KEY: $WALLET_API_KEY
      SPRING_DB_PASSWORD: $WALLET_SPRING_DB_PASSWORD
      DB_USERNAME: $WALLET_DB_USERNAME
      DB_SPRING_URL: $WALLET_SPRING_DB_URL
      DB_DOCKER_URL: $WALLET_DOCKER_DB_URL
      DOCKER_DB_PASSWORD: $WALLET_DOCKER_DB_PASSWORD
    restart: on-failure

  email-notification-api:
    container_name: email-notification-api
    build:
      context: ./notificationApi
      dockerfile: Dockerfile
    env_file: ./.env
    volumes:
      - $LOG_PATH/log:/log
    ports:
      - $NOTIFICATION_LOCAL_PORT:$NOTIFICATION_DOCKER_PORT
    networks:
      spring-mockstock-network:
    restart: on-failure

  mock-stock-data-server:
    container_name: mock-stock-data-server
    depends_on:
      - mongo_db
      - auth-server
    build:
      context: ./apiMockStocks
      dockerfile: Dockerfile
    restart: on-failure
    env_file: ./.env
    image: mock-stock-data-server:latest
    ports:
      - $SPRING_LOCAL_PORT:$SPRING_DOCKER_PORT
    networks:
      - spring-mockstock-network
    environment:

      SPRING_APPLICATION_JSON: '{
          "spring.data.mongodb.uri" : "mongodb://$MONGODB_USER:$MONGODB_PASSWORD@mongo_db:$MONGODB_DOCKER_PORT/$MONGODB_DATABASE?authSource=admin"
        }'

      MONGODB_USERNAME: $MONGODB_USERNAME
      MONGODB_PASSWORD: $MONGODB_PASSWORD
      MONGODB_DATABASE: $MONGODB_DATABASE
      MONGODB_PORT: $MONGODB_PORT
      MONGODB_HOST: $MONGODB_HOST
    volumes:
      - .m2:/root/.m2
      - $LOG_PATH/log:/log
    stdin_open: true
    tty: true

  auth-server:
    container_name: auth-server
    build:
      context: ./AuthorizationServerMockStock
      dockerfile: Dockerfile
    image: auth-server:latest
    env_file: ./.env
    ports:
      - $AUTH_LOCAL_PORT:$AUTH_DOCKER_PORT
    networks:
      - spring-mockstock-network
    environment:
      AUTH_USER_PASSWORD: $AUTH_USER_PASSWORD
      AUTH_USER_USERNAME: $AUTH_USER_USERNAME
      CLIENT_ID: $AUTH_CLIENT_ID
      CLIENT_SECRET: $AUTH_CLIENT_SECRET
      CLIENT_REDIRECT_URI: $AUTH_CLIENT_REDIRECT_URI
networks:
  spring-mockstock-network:
    driver: bridge

volumes:
  db: